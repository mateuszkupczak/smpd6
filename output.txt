> library("neuralnet")
> 
> #Going to create a neural network to perform prediction
> #Type ?neuralnet for more information on the neuralnet library
> 
> #Generate training data
> #And store them as a dataframe
> traininginput <- as.data.frame(matrix(c(276, 130, 17,
+                                         262, 98, 18,
+                                         196, 75, 28,
+                                         192, 98, 21,
+                                         206, 98, 24,
+                                         228, 111, 24,
+                                         188, 98, 20,
+                                         279, 87, 16,
+                                         206, 98, 24,
+                                         246, 98, 16,
+                                         100, 56, 20,
+                                         210, 98, 20,
+                                         212, 98, 18,
+                                         361, 211, 12,
+                                         166, 64, 19), nrow=15, ncol=3))
> trainingoutput <- c(3399, 2099, 899, 1399, 1799, 1199, 1699, 1999, 2199, 2099, 890, 1899, 1799, 3449, 1198)
> 
> #Column bind the data into one variable
> trainingdata <- cbind(traininginput, trainingoutput)
> 
> # Create Vector of Column Max and Min Values
> maxs <- apply(trainingdata[,], 2, max)
> mins <- apply(trainingdata[,], 2, min)
> 
> # Use scale() and convert the resulting matrix to a data frame
> scaled.trainingdata <- as.data.frame(scale(trainingdata[,], center=mins, scale=maxs-mins))
> trainingdata <- scaled.trainingdata
> 
> # Check out results
> print(head(trainingdata, 10))
               V1            V2            V3 trainingoutput
1  1.000000000000 0.80608365019 0.25214899713 0.980461117624
2  0.436293436293 0.36121673004 0.12607449857 0.472450175850
3  0.000000000000 0.03041825095 0.02292263610 0.003516998828
4  0.945945945946 0.65399239544 0.56733524355 0.198905822587
5  0.312741312741 0.31178707224 0.24641833811 0.355216881594
6  0.003861003861 0.01520912548 0.02292263610 0.120750293083
7  0.691119691120 1.00000000000 0.57306590258 0.316139116843
8  0.223938223938 0.26996197719 0.24641833811 0.433372411098
9  0.042471042471 0.00000000000 0.01719197708 0.511527940602
10 0.675675675676 0.72243346008 1.00000000000 0.472450175850
> 
> colnames(trainingdata) <- c("Cooler_storage_volume", "Freezer_storage_volume", "Temp_keep_in_h_if_power_outage", "Price") 
> print(trainingdata)
   Cooler_storage_volume Freezer_storage_volume Temp_keep_in_h_if_power_outage          Price
1         1.000000000000          0.80608365019                  0.25214899713 0.980461117624
2         0.436293436293          0.36121673004                  0.12607449857 0.472450175850
3         0.000000000000          0.03041825095                  0.02292263610 0.003516998828
4         0.945945945946          0.65399239544                  0.56733524355 0.198905822587
5         0.312741312741          0.31178707224                  0.24641833811 0.355216881594
6         0.003861003861          0.01520912548                  0.02292263610 0.120750293083
7         0.691119691120          1.00000000000                  0.57306590258 0.316139116843
8         0.223938223938          0.26996197719                  0.24641833811 0.433372411098
9         0.042471042471          0.00000000000                  0.01719197708 0.511527940602
10        0.675675675676          0.72243346008                  1.00000000000 0.472450175850
11        0.312741312741          0.31178707224                  0.57020057307 0.000000000000
12        0.015444015444          0.03041825095                  0.00000000000 0.394294646346
13        0.729729729730          0.87452471483                  0.44126074499 0.355216881594
14        0.312741312741          0.31178707224                  0.14899713467 1.000000000000
15        0.027027027027          0.00000000000                  0.02005730659 0.120359515436
> 
> #Train the neural network
> #Going to have C(6, 5, 3) hidden layers
> #Threshold is a numeric value specifying the threshold for the partial
> #derivatives of the error function as stopping criteria.
> net.price <- neuralnet(Price~Cooler_storage_volume+Freezer_storage_volume+Temp_keep_in_h_if_power_outage, trainingdata, hidden=c(6, 5, 3), threshold=0.001)
> print(net.price)
$call
neuralnet(formula = Price ~ Cooler_storage_volume + Freezer_storage_volume + 
    Temp_keep_in_h_if_power_outage, data = trainingdata, hidden = c(6, 
    5, 3), threshold = 0.001)

$response
            Price
1  0.980461117624
2  0.472450175850
3  0.003516998828
4  0.198905822587
5  0.355216881594
6  0.120750293083
7  0.316139116843
8  0.433372411098
9  0.511527940602
10 0.472450175850
11 0.000000000000
12 0.394294646346
13 0.355216881594
14 1.000000000000
15 0.120359515436

$covariate
                [,1]          [,2]          [,3]
 [1,] 1.000000000000 0.80608365019 0.25214899713
 [2,] 0.436293436293 0.36121673004 0.12607449857
 [3,] 0.000000000000 0.03041825095 0.02292263610
 [4,] 0.945945945946 0.65399239544 0.56733524355
 [5,] 0.312741312741 0.31178707224 0.24641833811
 [6,] 0.003861003861 0.01520912548 0.02292263610
 [7,] 0.691119691120 1.00000000000 0.57306590258
 [8,] 0.223938223938 0.26996197719 0.24641833811
 [9,] 0.042471042471 0.00000000000 0.01719197708
[10,] 0.675675675676 0.72243346008 1.00000000000
[11,] 0.312741312741 0.31178707224 0.57020057307
[12,] 0.015444015444 0.03041825095 0.00000000000
[13,] 0.729729729730 0.87452471483 0.44126074499
[14,] 0.312741312741 0.31178707224 0.14899713467
[15,] 0.027027027027 0.00000000000 0.02005730659

$model.list
$model.list$response
[1] "Price"

$model.list$variables
[1] "Cooler_storage_volume"          "Freezer_storage_volume"         "Temp_keep_in_h_if_power_outage"


$err.fct
function (x, y) 
{
    1/2 * (y - x)^2
}
<environment: 0x0000000009a3adc0>
attr(,"type")
[1] "sse"

$act.fct
function (x) 
{
    1/(1 + exp(-x))
}
<environment: 0x0000000009a3adc0>
attr(,"type")
[1] "logistic"

$linear.output
[1] TRUE

$data
   Cooler_storage_volume Freezer_storage_volume Temp_keep_in_h_if_power_outage          Price
1         1.000000000000          0.80608365019                  0.25214899713 0.980461117624
2         0.436293436293          0.36121673004                  0.12607449857 0.472450175850
3         0.000000000000          0.03041825095                  0.02292263610 0.003516998828
4         0.945945945946          0.65399239544                  0.56733524355 0.198905822587
5         0.312741312741          0.31178707224                  0.24641833811 0.355216881594
6         0.003861003861          0.01520912548                  0.02292263610 0.120750293083
7         0.691119691120          1.00000000000                  0.57306590258 0.316139116843
8         0.223938223938          0.26996197719                  0.24641833811 0.433372411098
9         0.042471042471          0.00000000000                  0.01719197708 0.511527940602
10        0.675675675676          0.72243346008                  1.00000000000 0.472450175850
11        0.312741312741          0.31178707224                  0.57020057307 0.000000000000
12        0.015444015444          0.03041825095                  0.00000000000 0.394294646346
13        0.729729729730          0.87452471483                  0.44126074499 0.355216881594
14        0.312741312741          0.31178707224                  0.14899713467 1.000000000000
15        0.027027027027          0.00000000000                  0.02005730659 0.120359515436

$net.result
$net.result[[1]]
               [,1]
1   0.9803234993129
2   0.4707441094716
3   0.0122301661712
4   0.1985599987463
5   0.3554373679139
6   0.1087281163743
7   0.3166616663161
8   0.4338235190284
9   0.5105294771414
10  0.4722104218229
11 -0.0004747624511
12  0.3935303819618
13  0.3561219796485
14  1.0010921431874
15  0.1252755194719


$weights
$weights[[1]]
$weights[[1]][[1]]
              [,1]          [,2]           [,3]          [,4]          [,5]         [,6]
[1,] -0.4855724567 -7.1857145092  -0.4362939903 -0.6934764458  -1.264736201 -1.499718778
[2,] -4.1805269624 16.3423697581 -17.2310072850  1.9782747819 116.000963075  1.155092017
[3,] -1.9239060256 -0.3914805279  -2.1973588849  4.4800339962  79.334162466  4.293925797
[4,]  7.7739669551 14.2808941653   9.0385977977 -7.3246709055 -24.725630163 -6.894619260

$weights[[1]][[2]]
               [,1]           [,2]           [,3]           [,4]          [,5]
[1,]  -0.2163640868   0.3153876828  -0.8263070555   0.2819393820 -0.6434825863
[2,]   2.3889293629   3.8388628188   1.6163336547   0.1158733738 -0.2759589554
[3,]  23.2283938545  -1.0581386466  -0.9656423228   3.1376752830 -5.9730495466
[4,] -22.8169750713 -16.1661868206 -18.6628209723  14.2073717943 -2.5707255900
[5,]   2.9136589607  -3.0577118065   1.2231086940  -1.8164443888  2.8175351475
[6,]   1.3000405944   0.2942394110  -0.7556333721   0.6641928831 -1.5672675167
[7,]  14.6944479770   1.9367037289  -0.5703438793 -12.3918559038  4.1384048351

$weights[[1]][[3]]
              [,1]           [,2]          [,3]
[1,]  1.5631861433  -0.9759062995 -0.4166229308
[2,] -0.5825380070   0.9735059920 -3.2490510820
[3,] -0.1716801831  -0.9445699239 -1.6687308808
[4,]  3.4275628905   0.3634703314 -3.0356764655
[5,] -1.4034653986  -0.7786926095  1.9131052997
[6,]  5.0998421438 -20.5970389627 -3.2265288909

$weights[[1]][[4]]
              [,1]
[1,]  0.2564193321
[2,]  1.1135260829
[3,] -2.2672026867
[4,] -1.6970064817



$startweights
$startweights[[1]]
$startweights[[1]][[1]]
              [,1]          [,2]          [,3]          [,4]          [,5]          [,6]
[1,] -1.7958439470 -0.2448602471 -1.2598980140 -0.6731957723  0.9870296508 -1.7807338590
[2,]  0.5399387572  1.5224421118 -1.3084985746  0.1801868688  0.9064707179  0.3093760151
[3,] -0.0411918631  1.0361483572 -0.3015420305  1.7312805738 -0.8741733212 -0.1996509058
[4,] -0.4110832082 -0.6037713771 -0.4853821759 -0.5694605356 -0.3739339073 -0.5206508843

$startweights[[1]][[2]]
              [,1]          [,2]          [,3]           [,4]           [,5]
[1,] -0.2134270628  0.5447550395 -0.5479780593  0.06542564197 -0.58324222413
[2,] -2.6940293215  0.8894112603 -1.2391863119 -0.92914297804  0.07509427404
[3,]  1.1531046313 -1.0238169348 -0.9650047588 -0.97017584951 -1.48219971752
[4,]  0.1546075737  0.9896579897  1.0627558039  0.53106677958 -1.10392520889
[5,] -0.8272583747  1.4860876742  0.2578410758 -0.50933383143  0.56709715184
[6,] -0.4008185596  0.7410297560 -0.2901781137  0.40717756712 -0.56887797483
[7,] -1.6984388525  1.9039829039 -1.1373664973 -1.12898737564  0.05582308805

$startweights[[1]][[3]]
              [,1]          [,2]           [,3]
[1,]  1.6774903507 -1.0022919800 -0.42010261561
[2,] -0.2335545484 -0.3008217967 -1.62161732634
[3,] -0.2842176092 -0.8918501141 -1.64769619677
[4,] -0.2739661146 -0.4695379799 -2.17585970814
[5,] -0.9188367870 -0.9963619037 -0.07015873096
[6,] -0.2382164085 -1.8620526240 -1.24538047720

$startweights[[1]][[4]]
              [,1]
[1,]  0.3671326626
[2,]  0.8844516191
[3,] -2.2791537277
[4,] -1.6182385308



$generalized.weights
$generalized.weights[[1]]
               [,1]             [,2]             [,3]
1      23.642224053    80.3228130155  -129.1855765630
2     -15.909984512     8.3626062197   -28.0185392039
3    -731.983943137  -652.4683134553  -337.1067840090
4      -2.335495396     0.3661239766     2.4251416997
5      -4.847563168     1.4438288868    -7.0206300764
6    -114.877106921   -98.3855051137   -38.9032412736
7      -1.171120965     1.9335175427    -0.8660595752
8      -4.735775989     6.1323690907   -31.2298477888
9     120.221761654    34.4114339806   -96.3556877890
10      2.032976847     0.2666494418    -0.8876415977
11 -13086.103866842 -1389.8808067871  6075.3317270977
12    116.060565144    34.0019149401   -99.9465789624
13      1.303069216     6.2597766452    -9.2743106381
14   7967.056794711 -2608.7566975163 11644.4122504805
15     68.169419610   -10.4258595241  -111.4547839832


$result.matrix
                                                            1
error                                         0.0001260346848
reached.threshold                             0.0009873290203
steps                                      2121.0000000000000
Intercept.to.1layhid1                        -0.4855724566844
Cooler_storage_volume.to.1layhid1            -4.1805269624212
Freezer_storage_volume.to.1layhid1           -1.9239060256026
Temp_keep_in_h_if_power_outage.to.1layhid1    7.7739669550671
Intercept.to.1layhid2                        -7.1857145091631
Cooler_storage_volume.to.1layhid2            16.3423697580878
Freezer_storage_volume.to.1layhid2           -0.3914805279276
Temp_keep_in_h_if_power_outage.to.1layhid2   14.2808941652861
Intercept.to.1layhid3                        -0.4362939902744
Cooler_storage_volume.to.1layhid3           -17.2310072849955
Freezer_storage_volume.to.1layhid3           -2.1973588849435
Temp_keep_in_h_if_power_outage.to.1layhid3    9.0385977976893
Intercept.to.1layhid4                        -0.6934764458289
Cooler_storage_volume.to.1layhid4             1.9782747818918
Freezer_storage_volume.to.1layhid4            4.4800339962021
Temp_keep_in_h_if_power_outage.to.1layhid4   -7.3246709055460
Intercept.to.1layhid5                        -1.2647362011656
Cooler_storage_volume.to.1layhid5           116.0009630754785
Freezer_storage_volume.to.1layhid5           79.3341624663120
Temp_keep_in_h_if_power_outage.to.1layhid5  -24.7256301632144
Intercept.to.1layhid6                        -1.4997187784120
Cooler_storage_volume.to.1layhid6             1.1550920168512
Freezer_storage_volume.to.1layhid6            4.2939257966618
Temp_keep_in_h_if_power_outage.to.1layhid6   -6.8946192595222
Intercept.to.2layhid1                        -0.2163640868191
1layhid.1.to.2layhid1                         2.3889293629275
1layhid.2.to.2layhid1                        23.2283938545420
1layhid.3.to.2layhid1                       -22.8169750713027
1layhid.4.to.2layhid1                         2.9136589606559
1layhid.5.to.2layhid1                         1.3000405943923
1layhid.6.to.2layhid1                        14.6944479770438
Intercept.to.2layhid2                         0.3153876828337
1layhid.1.to.2layhid2                         3.8388628188450
1layhid.2.to.2layhid2                        -1.0581386466034
1layhid.3.to.2layhid2                       -16.1661868206061
1layhid.4.to.2layhid2                        -3.0577118065202
1layhid.5.to.2layhid2                         0.2942394110343
1layhid.6.to.2layhid2                         1.9367037288767
Intercept.to.2layhid3                        -0.8263070554660
1layhid.1.to.2layhid3                         1.6163336547378
1layhid.2.to.2layhid3                        -0.9656423227595
1layhid.3.to.2layhid3                       -18.6628209722580
1layhid.4.to.2layhid3                         1.2231086940262
1layhid.5.to.2layhid3                        -0.7556333721206
1layhid.6.to.2layhid3                        -0.5703438793064
Intercept.to.2layhid4                         0.2819393820243
1layhid.1.to.2layhid4                         0.1158733738010
1layhid.2.to.2layhid4                         3.1376752829639
1layhid.3.to.2layhid4                        14.2073717943328
1layhid.4.to.2layhid4                        -1.8164443888384
1layhid.5.to.2layhid4                         0.6641928830777
1layhid.6.to.2layhid4                       -12.3918559038148
Intercept.to.2layhid5                        -0.6434825862925
1layhid.1.to.2layhid5                        -0.2759589554177
1layhid.2.to.2layhid5                        -5.9730495465759
1layhid.3.to.2layhid5                        -2.5707255900045
1layhid.4.to.2layhid5                         2.8175351475268
1layhid.5.to.2layhid5                        -1.5672675166783
1layhid.6.to.2layhid5                         4.1384048350918
Intercept.to.3layhid1                         1.5631861433354
2layhid.1.to.3layhid1                        -0.5825380070240
2layhid.2.to.3layhid1                        -0.1716801831136
2layhid.3.to.3layhid1                         3.4275628905203
2layhid.4.to.3layhid1                        -1.4034653986465
2layhid.5.to.3layhid1                         5.0998421437644
Intercept.to.3layhid2                        -0.9759062995252
2layhid.1.to.3layhid2                         0.9735059920033
2layhid.2.to.3layhid2                        -0.9445699239323
2layhid.3.to.3layhid2                         0.3634703314248
2layhid.4.to.3layhid2                        -0.7786926094999
2layhid.5.to.3layhid2                       -20.5970389627011
Intercept.to.3layhid3                        -0.4166229308162
2layhid.1.to.3layhid3                        -3.2490510820327
2layhid.2.to.3layhid3                        -1.6687308807961
2layhid.3.to.3layhid3                        -3.0356764655062
2layhid.4.to.3layhid3                         1.9131052996789
2layhid.5.to.3layhid3                        -3.2265288908563
Intercept.to.Price                            0.2564193321360
3layhid.1.to.Price                            1.1135260829397
3layhid.2.to.Price                           -2.2672026867270
3layhid.3.to.Price                           -1.6970064816887

attr(,"class")
[1] "nn"
> 
> #Plot the neural network
> plot(net.price)
> 
> #Test the neural network on some training data
> testdata <- as.data.frame(matrix(c(262, 64, 28,
+                                    206, 75, 16,
+                                    361, 56, 20), nrow=3, ncol=3))
> scaled.testdata <- as.data.frame(scale(testdata[,], center=mins[1:3], scale=maxs[1:3]-mins[1:3]))
> net.results <- compute(net.price, scaled.testdata) #Run them through the neural network
> 
> #Lets see what properties net.price has
> ls(net.results)
[1] "net.result" "neurons"   
> 
> #Lets see the results
> print(net.results$net.result)
             [,1]
[1,] 0.4818771743
[2,] 1.3065601161
[3,] 0.3745475328
> 